var path = require('path');

module.exports = function (grunt) {

// -- Config -------------------------------------------------------------------

grunt.initConfig({

    pkg      : grunt.file.readJSON('package.json'),
    normalize: grunt.file.readJSON('src/base/bower.json'),

    // -- Constants ------------------------------------------------------------

    BUILD_COMMENT: 'THIS FILE IS GENERATED BY A BUILD SCRIPT - DO NOT EDIT!',

    // -- Clean Config ---------------------------------------------------------

    clean: {
        build    : ['build/'],
        build_res: ['build/*-r.css'],
        release  : ['release/<%= pkg.version %>/'],
        base     : ['src/base/css/', 'src/base/bower.json', 'src/base/LICENSE.md']
    },

    // -- Copy Config ----------------------------------------------------------

    copy: {
        build: {
            expand : true,
            flatten: true,
            src    : 'src/*.css',
            dest   : 'build/',

            rename: function (dest, src) {
                // normalize -> base
                src = src.replace(/^normalize(-.+\.css|\.css)$/, 'base$1');
                return path.join(dest, src);
            }
        },

        normalize: {
            expand : true,
            flatten: true,
            cwd    : 'bower_components/normalize-css/',
            src    : '{bower.json,LICENSE.md,normalize.css}',
            dest   : 'src/base/',

            rename: function (dest, file) {
                if (grunt.file.isMatch('*.css', file)) {
                    return path.join(dest, 'css', file);
                }

                return path.join(dest, file);
            },

            options: {
                processContent: function (content, file) {
                    var comment = grunt.config('BUILD_COMMENT');

                    if (grunt.file.isMatch({matchBase: true}, '*.css', file)) {
                        content = '/* ' + comment + ' */\n' + content;
                    } else if (grunt.file.isMatch({matchBase: true}, '*.html', file)) {
                        content = '<!-- ' + comment + ' -->\n' + content;
                    }

                    return content;
                }
            }
        }
    },

    // -- Concat Config --------------------------------------------------------

    concat: {

        build: {
          src: 'src/*.css',
          dest: 'build/<%= pkg.name %>.css'
        }
    },

    // -- CSSLint Config -------------------------------------------------------

    csslint: {
        options: {
            csslintrc: '.csslintrc'
        },

        src: {
            src: [
                'src/*.css',
                '!src/normalize.css'
            ]
        }
    },

    // -- CSSMin Config --------------------------------------------------------

    cssmin: {
        options: {
            // report: 'gzip'
        },

        files: {
            expand: true,
            src   : 'build/*.css',
            ext   : '-min.css'
        }
    },

    // -- Compress Config ------------------------------------------------------

    compress: {
        release: {
            options: {
                archive: 'release/<%= pkg.version %>/<%= pkg.name %>-<%= pkg.version %>.zip'
            },

            expand : true,
            flatten: true,
            src    : 'build/*.css',
            dest   : '<%= pkg.name %>/<%= pkg.version %>/'
        }
    },

    // -- License Config -------------------------------------------------------

    license: {
        normalize: {
            options: {
                banner: [
                    '/*!',
                    'normalize.css v<%= normalize.version %> | MIT License | git.io/normalize',
                    'Copyright (c) Nicolas Gallagher and Jonathan Neal',
                    '*/\n'
                ].join('\n')
            },

            expand: true,
            cwd   : 'build/',
            src   : ['<%= pkg.name %>*.css']
        },

        yahoo: {
            options: {
                banner: [
                    '/*!',
                    'Pure v<%= pkg.version %>',
                    'Copyright 2013 Yahoo! Inc. All rights reserved.',
                    'Licensed under the BSD License.',
                    'https://github.com/yui/pure/blob/master/LICENSE.md',
                    '*/\n'
                ].join('\n')
            },

            expand: true,
            src   : ['build/*.css']
        }
    },

    // -- Watch/Observe Config -------------------------------------------------

    observe: {
        src: {
            files: 'src/**/css/*.css',
            tasks: ['test', 'suppress', 'default'],

            options: {
                interrupt: true
            }
        }
    }
});

// -- Main Tasks ---------------------------------------------------------------

grunt.loadNpmTasks('grunt-contrib-clean');
grunt.loadNpmTasks('grunt-contrib-copy');
grunt.loadNpmTasks('grunt-contrib-concat');
grunt.loadNpmTasks('grunt-contrib-csslint');
grunt.loadNpmTasks('grunt-contrib-cssmin');
grunt.loadNpmTasks('grunt-contrib-compress');
grunt.loadNpmTasks('grunt-contrib-watch');

grunt.registerTask('default', [
    'clean:build',
    'copy:build',
    'concat:build',
    'clean:build_res',
    'cssmin',
    'concat:all',
    'license'
]);

grunt.registerTask('test', [
    'csslint'
]);

// Makes the `watch` task run a build first.
grunt.renameTask('watch', 'observe');
grunt.registerTask('watch', ['default', 'observe']);

grunt.registerTask('import', [
    'bower-install',
    'import-normalize'
]);

grunt.registerTask('release', [
    'test',
    'default',
    'clean:release',
    'compress:release'
]);

// -- Suppress Task ------------------------------------------------------------

grunt.registerTask('suppress', function () {
    var allowed = ['success', 'fail', 'warn', 'error'];

    grunt.util.hooker.hook(grunt.log, {
        passName: true,

        pre: function (name) {
            if (allowed.indexOf(name) === -1) {
                grunt.log.muted = true;
            }
        },

        post: function () {
            grunt.log.muted = false;
        }
    });
});

// -- Import Tasks -------------------------------------------------------------

grunt.registerTask('import-normalize', [
    'clean:base',
    'copy:normalize',
    'contextualize:normalize'
]);

// -- Bower Task ---------------------------------------------------------------

grunt.registerTask('bower-install', 'Installs Bower dependencies.', function () {
    var bower = require('bower'),
        done  = this.async();

    bower.commands.install()
        .on('data', function (data) { grunt.log.write(data); })
        .on('end', done);
});

// -- License Task -------------------------------------------------------------

grunt.registerMultiTask('license', 'Stamps license banners on files.', function () {
    var options = this.options({banner: ''}),
        banner  = grunt.template.process(options.banner),
        tally   = 0;

    this.files.forEach(function (filePair) {
        filePair.src.forEach(function (file) {
            grunt.file.write(file, banner + grunt.file.read(file));
            tally += 1;
        });
    });

    grunt.log.writeln('Stamped license on ' + String(tally).cyan + ' files.');
});
